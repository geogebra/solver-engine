openapi: 3.0.3

info:
  title: 'GeoGebra Solver API'
  version: '1.3.1-plut-802'
servers:
  - url: http://localhost:8080/api/v1/

paths:
  /versionInfo:
    get:
      operationId: getVersionInfo
      description: 'Get solver version info'
      responses:
        '200':
          description: 'Successfully returned version info'
          content:
            application/json:
              schema:
                $ref: 'VersionInfo.yaml'

  /settings:
    get:
      operationId: getSettings
      description: 'Get the list of possible solver engine settings with their descriptions'
      responses:
        '200':
          description: 'Successfully returned all possible settings'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  title: SettingEntry
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    values:
                      type: array
                      items:
                        type: string

  /presets:
    get:
      operationId: getPresets
      description: 'Get the list of setting presets'
      responses:
        '200':
          description: 'Successfully returned all possible presets'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  title: PresetEntry
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    settings:
                      type: array
                      items:
                        type: object
                        title: SettingWithValue
                        properties:
                          name:
                            type: string
                          value:
                            type: string

  /plans:
    get:
      operationId: listPlans
      description: 'List all available plan IDs'
      responses:
        '200':
          description: 'Successfully listed plans'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /plans/{planId}:
    get:
      operationId: getPlan
      description: 'Get the details of a plan'
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully returned plan details'
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'Invalid request'
          content:
            application/json:
              schema:
                type: object

  /plans/{planId}/apply:
    post:
      operationId: applyPlan
      description: 'Apply plan to input and return the transformation'
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolveRequest'
      responses:
        '200':
          description: 'Plan applied successfully'
          content:
            application/json:
              schema:
                $ref: 'Transformation.yaml'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object

  /selectPlans:
    post:
      operationId: selectPlans
      description: 'Select appropriate plans for given expression'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolveRequest'
      responses:
        '200':
          description: 'Plans selected successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'PlanSelection.yaml'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object

  /strategies:
    get:
      operationId: getStrategies
      description: 'Get all the strategies that can be used within the solver'
      responses:
        '200':
          description: 'Successfully returned strategies'
          content:
            application/json:
              schema:
                type: object

  /graph:
    post:
      operationId: createGraph
      description: 'Create a graph representation of the given expression'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphRequest'
      responses:
        '200':
          description: 'Successful request, returning graph data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object

components:
  schemas:
    Format:
      type: string
      enum: [latex, solver, json2]
      default: solver
    SolveRequest:
      type: object
      required:
        - input
        - format
      properties:
        input:
          type: string
        context:
          $ref: 'Context.yaml'
        format:
          $ref: '#/components/schemas/Format'
    GraphRequest:
      allOf:
        - $ref: '#/components/schemas/SolveRequest'
        - type: object
          properties:
            graphType:
              $ref: '#/components/schemas/GraphType'
            axes:
              type: array
              items:
                type: string
    GraphResponse:
      type: object
      required:
        - graphType
        - graphs
        - axes
      properties:
        coordinateSystem:
          $ref: '#/components/schemas/Cartesian2DSystem'
        objects:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ExpressionGraphObject'
              - $ref: '#/components/schemas/IntersectionGraphObject'
    Cartesian2DSystem:
      type: object
      required:
        - type
        - horizontalAxis
        - verticalAxis
      properties:
        type:
          type: string
          enum: ['Cartesian2D']
        horizontalAxis:
          $ref: '#/components/schemas/GraphAxis'
        verticalAxis:
          $ref: '#/components/schemas/GraphAxis'
    GraphAxis:
      type: object
      properties:
        variable:
          type: string
        label:
          type: string
        minValue:
          type: number
        maxValue:
          type: number
    ExpressionGraphObject:
      type: object
      required:
        - type
      properties:
        label:
          type: string
        type:
          type: string
          enum: [curve2D]
        expression: {}
    IntersectionGraphObject:
      type: object
      required:
        - type
      properties:
        label:
          type: string
        type:
          type: string
          enum: [intersection]
        objectLabels:
          type: array
          minItems: 2
          items:
            type: string
        projectOntoHorizontalAxis:
          type: boolean
        projectOntoVerticalAxis:
          type: boolean
        showLabelWithCoordinates:
          type: boolean
    GraphType:
      type: string
      enum: [2DGraph, 3DGraph]
