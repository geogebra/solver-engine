default:
  image: gradle:8.0.2-jdk17-alpine
  cache:
    key:
      files:
        - gradle/wrapper/gradle-wrapper.properties
      prefix: gradle-cache-
    paths:
      - cache/.gradle/wrapper
      - cache/.gradle/caches
      - cache/.gradle/notifications

variables:
  GITLAB_CLUSTER: solver-v2
  GGBTRANS_SOLVER_IMPORT_URL: https://dev.geogebra.org/ggbtrans/props/api/solver_import
  GRADLE: './gradlew --no-daemon --stacktrace --build-cache --gradle-user-home cache/.gradle'
  PRODUCTION_DOMAIN: solver-api.geogebra.org
  DEVELOPMENT_DOMAIN: solver.geogebra.net

stages:
  - checks
  - build
  - publish
  - deploy

before_script:
  # Extract the meaningful part from the commit ref slug.  This means if the branch starts with a JIRA ticket
  # number of the for ABC-123 then just use that, else use the whole branch name.
  - export SLUG=`echo $CI_COMMIT_REF_SLUG | sed 's/^\([a-z][a-z]*\-[0-9][0-9]*\).*/\1/'`

  # The tag for the container image of the solver backend that will be published to the container registry
  - export SOLVER_IMAGE_TAG="$SLUG"

  # The name of the Helm deployment - will also be used as the base for naming the kubernetes entities (see helm templates)
  - export DEPLOYMENT_NAME="$SLUG"

  # The domain where the deployed solver backend will be available
  - export DEPLOYMENT_DOMAIN=`if [[ $CI_COMMIT_REF_NAME == "release" ]]; then echo "$PRODUCTION_DOMAIN"; else echo "$DEVELOPMENT_DOMAIN"; fi`

  # The path at which the root of the deployment can be reached
  - export CONTEXT_PATH=`if [[ $CI_COMMIT_REF_NAME == "release" ]]; then echo "/"; else echo "/$SLUG"; fi`

  # The base URL for reaching the deployment
  - export BASE_URL=`if [[ CONTEXT_PATH == "/" ]]; then echo "https://$DEPLOYMENT_DOMAIN"; else echo "https://$DEPLOYMENT_DOMAIN$CONTEXT_PATH"; fi`

  # The URL where the solver API can be reached
  - export API_URL="$BASE_URL/api/v1"

  # The URL where the poker can be reached
  - export POKER_URL="$BASE_URL/poker/index.html"

  - export REPO_FULL_NAME=`echo $CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME`
  - export REPOSITORY_ID=4 # The gitlab ID of the repository where our container images are uploaded

check-circular-dependencies-in-methods:
  stage: checks
  cache: []
  script:
    - ./scripts/check_method_dependencies.sh

test-git-tags:
  stage: checks
  script:
    - echo SLUG="$SLUG"
    - echo CI_COMMIT_TAG="$CI_COMMIT_TAG"
    - echo $CI_COMMIT_TAG | sed 's/^api-\([0-9]*\.[0-9]*\).*$/\1/'
  rules:
    - if: $CI_COMMIT_TAG
  #  - if: $CI_COMMIT_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9]+)?$

# Test SDK and build all artifacts from SDK for the poker and for possible release
build-sdk-and-poker:
  stage: build
  when: manual
  needs:
    # The Kotlin tests generate solver-poker/test-results-src/test-results.ts which is
    # needed by the TS tests.
    - build-engine
  image: node:18-alpine
  tags:
    - docker
  cache:
    key:
      files:
        - package-lock.json
      prefix: npm-cache-
    paths:
      - .npm/
  script:
    - node -v
    #- npm config set "@geogebra:registry" https://git.geogebra.org/api/v4/projects/126/packages/npm/
    #- npm config set "//git.geogebra.org/api/v4/projects/126/packages/npm/:_authToken" ${CI_JOB_TOKEN}
    - npm ci --cache .npm --prefer-offline
    - npm exec -c "prettier . -c"
    - npm test -ws
  artifacts:
    paths:
      - '@geogebra/solver-sdk/lib'
      - '@geogebra/solver-sdk/dist'
      - 'api/src/main/resources/static/poker'
    expire_in: 1 day

# The gradle 'build' includes running detekt, ktlint, runnings tests.
build-engine:
  stage: build
  when: manual
  needs: []
  tags:
    - docker
  script:
    - $GRADLE build
  artifacts:
    paths:
      - build/reports/ktlint
      - build/reports/detekt
      - methods/build/generated/ksp/main/resources/TranslationKeys.json
      - methods/build/generated/ksp/main/resources/Method.TranslationKeys.json
      - engine/build/generated/ksp/main/resources/TranslationKeys.json
      # Used by some TS tests
      - solver-poker/test-results-src/test-results.ts
    expire_in: 1 day

# Package the engine into a docker image
package-engine:
  stage: publish
  when: manual
  needs:
    - build-engine
    - build-sdk-and-poker
  tags:
    - docker
  script:
    - $GRADLE bootBuildImage --imageName="registry.git.geogebra.org/solver-team/solver-engine/api:$SOLVER_IMAGE_TAG"

export-translation-keys:
  stage: publish
  needs:
    - build-engine
  image: curlimages/curl
  tags:
    - docker
  cache: []
  script:
    # Translation keys from the methods module (most keys)
    - |
      curl -X POST "$GGBTRANS_SOLVER_IMPORT_URL/?override_test=1" \
        --fail-with-body \
        --header "X-Token: $GGBTRANS_API_TOKEN" \
        --data @methods/build/generated/ksp/main/resources/TranslationKeys.json
    # Public method titles
    - |
      curl -X POST "$GGBTRANS_SOLVER_IMPORT_URL/?override_test=1" \
        --fail-with-body \
        --header "X-Token: $GGBTRANS_API_TOKEN" \
        --data @methods/build/generated/ksp/main/resources/Method.TranslationKeys.json
    # Generic translation keys from the engine module
    - |
      curl -X POST "$GGBTRANS_SOLVER_IMPORT_URL/?override_test=1" \
        --fail-with-body \
        --header "X-Token: $GGBTRANS_API_TOKEN" \
        --data @engine/build/generated/ksp/main/resources/TranslationKeys.json
  when: manual

# Deploy the engine to k8s
deploy-engine:
  stage: deploy
  when: manual
  needs:
    - package-engine
  image: alpine/k8s:1.23.7
  environment:
    name: solver/$CI_COMMIT_REF_SLUG
    url: $DYNAMIC_ENVIRONMENT_URL
    on_stop: undeploy-engine
  tags:
    - docker
  cache: []
  artifacts:
    reports:
      dotenv: deploy.env
  script:
    - kubectl config get-contexts
    - kubectl config use-context $REPO_FULL_NAME:$GITLAB_CLUSTER
    - helm package helm/ --version "6.6.6"
    - |
      helm upgrade --install $DEPLOYMENT_NAME solver-6.6.6.tgz \
          --set deploymentDomain=$DEPLOYMENT_DOMAIN \
          --set contextPath=$CONTEXT_PATH \
          --set deploymentName=$DEPLOYMENT_NAME \
          --set solverImageTag=$SOLVER_IMAGE_TAG \
          --set commitSha=$CI_COMMIT_SHA \
          --set imageCredentials.username=$CI_REGISTRY_USER \
          --set imageCredentials.password=$CI_REGISTRY_PASSWORD \
          --set springProfile=production
    - echo "DYNAMIC_ENVIRONMENT_URL=$POKER_URL" >> deploy.env

# Make an SDK release
sdk-semantic-release:
  stage: deploy
  when: manual
  needs:
    - build-sdk-and-poker
  # We would normally use "node:18-alpine" instead of "node:18" because it is smaller, but
  # we need git installed in order for semantic-release to work.
  image: node:18
  tags:
    - docker
  cache:
    key:
      files:
        - package-lock.json
      prefix: npm-cache-
    paths:
      - .npm/
  variables:
    NPM_TOKEN: ${CI_JOB_TOKEN}
    # The default (fetch) strategy does not remove deleted tags, so they can be out of date
    # when running semantic release causing all kinds of issues
    GIT_STRATEGY: clone
  script:
    - node -v
    - node ./@geogebra/solver-sdk/set-base-url.mjs $API_URL
    - npm ci --cache .npm --prefer-offline
    - npm config set "@geogebra:registry" https://git.geogebra.org/api/v4/projects/126/packages/npm/
    - npm config set "//git.geogebra.org/api/v4/projects/126/packages/npm/:_authToken" ${CI_JOB_TOKEN}
    - npm run semantic-release -w @geogebra/solver-sdk

# Remove kubernetes deployment.  This job is automatically triggered when the feature branch is deleted.
undeploy-engine:
  stage: deploy
  dependencies: []
  image: alpine/k8s:1.23.7
  variables:
    # As the branch is deleted at this point we can't fetch the repo (and we don't need to)
    GIT_STRATEGY: none
  environment:
    name: solver/$CI_COMMIT_REF_SLUG
    action: stop
  tags:
    - docker
  cache: []
  script:
    - echo "Attempting do delete tag $SLUG..."
    # Call the gitlab API to delete the image tag as it is no longer needed. This will allow the image
    # to be garbage-collected, saving space on the container registry.
    - |
      curl --request DELETE \
           --header "PRIVATE-TOKEN: $GITLAB_API_PRIVATE_TOKEN" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$REPOSITORY_ID/tags/$SOLVER_IMAGE_TAG"
    - kubectl config get-contexts
    - kubectl config use-context $REPO_FULL_NAME:$GITLAB_CLUSTER
    - helm uninstall $DEPLOYMENT_NAME
  when: manual
  except:
    - main
    - release
